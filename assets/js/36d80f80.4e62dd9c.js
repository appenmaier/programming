"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[9270],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(r),u=o,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return r?n.createElement(g,i(i({ref:t},s),{},{components:r})):n.createElement(g,i({ref:t},s))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3860:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={title:"Komparatoren",description:"",sidebar_position:220,tags:["schnittstelle","komparator"]},i=void 0,l={unversionedId:"documentation/comparators",id:"documentation/comparators",title:"Komparatoren",description:"",source:"@site/docs/documentation/comparators.md",sourceDirName:"documentation",slug:"/documentation/comparators",permalink:"/programming/docs/documentation/comparators",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/documentation/comparators.md",tags:[{label:"schnittstelle",permalink:"/programming/docs/tags/schnittstelle"},{label:"komparator",permalink:"/programming/docs/tags/komparator"}],version:"current",sidebarPosition:220,frontMatter:{title:"Komparatoren",description:"",sidebar_position:220,tags:["schnittstelle","komparator"]},sidebar:"tutorialSidebar",previous:{title:"Schnittstellen (Interfaces)",permalink:"/programming/docs/documentation/interfaces"},next:{title:"Ausnahmen (Exceptions)",permalink:"/programming/docs/documentation/exceptions"}},p={},c=[],s={toc:c};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Mit Hilfe der Methode ",(0,o.kt)("inlineCode",{parentName:"p"},"int compareTo(T)")," der Schnittstelle ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable<T>")," bzw. der Methode ",(0,o.kt)("inlineCode",{parentName:"p"},"int compare(T, T)")," der Schnittstelle ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator<T>")," k\xf6nnen Objekte einer Klasse miteinander verglichen werden. Der R\xfcckgabewert beider Methoden gibt die Ordnung der zu\nvergleichenden Objekte an:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"R\xfcckgabewert kleiner Null: das Vergleichsobjekt ist gr\xf6\xdfer"),(0,o.kt)("li",{parentName:"ul"},"R\xfcckgabewert gleich Null: beide Objekte sind gleich gro\xdf"),(0,o.kt)("li",{parentName:"ul"},"R\xfcckgabewert gr\xf6\xdfer Null: das Vergleichsobjekt ist kleiner")),(0,o.kt)("p",null,"Objekte der Klasse ",(0,o.kt)("inlineCode",{parentName:"p"},"Foo")," k\xf6nnen durch die Implementierung der Methode ",(0,o.kt)("inlineCode",{parentName:"p"},"int compareTo(T)")," der Schnittstelle ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparable<T>")," miteinander verglichen werden."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class Foo implements Comparable<Foo> {\n    \n    public String bar;\n    \n    @Override\n    public int compareTo(Foo foo) {\n        return bar.compareTo(foo.bar);\n    }\n    \n}\n")),(0,o.kt)("p",null,"In der main-Methode der Startklasse wird mit Hilfe der statischen Methode ",(0,o.kt)("inlineCode",{parentName:"p"},"void sort(List<T>)")," der Klasse ",(0,o.kt)("inlineCode",{parentName:"p"},"Collections")," eine Liste mit Objekten der Klasse ",(0,o.kt)("inlineCode",{parentName:"p"},"Foo")," sortiert. Aufgrund der Implementierung der compareTo-Methode wird die Liste aufsteigend nach dem\nAttribut ",(0,o.kt)("inlineCode",{parentName:"p"},"bar")," sortiert."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class MainClass {\n\n    public static void main(String[] args) {\n        ArrayList<Foo> foos = new Arraylist<>();\n        ...\n        Collections.sort(foos);\n    }\n    \n}\n")))}m.isMDXComponent=!0}}]);