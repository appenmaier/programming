"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[9662],{5162:(e,a,l)=>{l.d(a,{Z:()=>i});var t=l(7294),n=l(6010);const r="tabItem_Ymn6";function i(e){let{children:a,hidden:l,className:i}=e;return t.createElement("div",{role:"tabpanel",className:(0,n.Z)(r,i),hidden:l},a)}},5488:(e,a,l)=>{l.d(a,{Z:()=>d});var t=l(7462),n=l(7294),r=l(6010),i=l(2389),s=l(7392),o=l(7094),u=l(2466);const m="tabList__CuJ",p="tabItem_LNqP";function c(e){var a;const{lazy:l,block:i,defaultValue:c,values:d,groupId:h,className:b}=e,g=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=d??g.map((e=>{let{props:{value:a,label:l,attributes:t}}=e;return{value:a,label:l,attributes:t}})),f=(0,s.l)(k,((e,a)=>e.value===a.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===c?c:c??(null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)??g[0].props.value;if(null!==v&&!k.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,o.U)(),[w,x]=(0,n.useState)(v),E=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=h){const e=y[h];null!=e&&e!==w&&k.some((a=>a.value===e))&&x(e)}const z=e=>{const a=e.currentTarget,l=E.indexOf(a),t=k[l].value;t!==w&&(T(a),x(t),null!=h&&N(h,String(t)))},Z=e=>{var a;let l=null;switch(e.key){case"ArrowRight":{const a=E.indexOf(e.currentTarget)+1;l=E[a]??E[0];break}case"ArrowLeft":{const a=E.indexOf(e.currentTarget)-1;l=E[a]??E[E.length-1];break}}null==(a=l)||a.focus()};return n.createElement("div",{className:(0,r.Z)("tabs-container",m)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},b)},k.map((e=>{let{value:a,label:l,attributes:i}=e;return n.createElement("li",(0,t.Z)({role:"tab",tabIndex:w===a?0:-1,"aria-selected":w===a,key:a,ref:e=>E.push(e),onKeyDown:Z,onFocus:z,onClick:z},i,{className:(0,r.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":w===a})}),l??a)}))),l?(0,n.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},g.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==w})))))}function d(e){const a=(0,i.Z)();return n.createElement(c,(0,t.Z)({key:String(a)},e))}},7833:(e,a,l)=>{l.d(a,{Z:()=>o});var t=l(7294),n=l(5488),r=l(5162),i=l(9960),s=l(814);function o(e){let{pullRequest:a,branchSuffix:l}=e;return t.createElement(n.Z,null,t.createElement(r.Z,{value:"exercise",label:"Exercise",default:!0},t.createElement(s.Z,{language:"console"},`git switch exercises/${l}`)),t.createElement(r.Z,{value:"solution",label:"Solution"},t.createElement(s.Z,{language:"console"},`git switch solutions/${l}`)),t.createElement(r.Z,{value:"pullrequest",label:"Pull Request"},"Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du in diesem"," ",t.createElement(i.Z,{to:`https://github.com/jappuccini/java-exercises/pull/${a}/files?diff=split`},"PR#",a)))}},4303:(e,a,l)=>{l.r(a),l.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var t=l(7462),n=(l(7294),l(3905)),r=l(7833);const i={title:"Polymorphie 01"},s=void 0,o={unversionedId:"exercises/polymorphie/polymorphie01",id:"exercises/polymorphie/polymorphie01",title:"Polymorphie 01",description:"- Passe die Klasse Vehicle aus \xdcbungsaufgabe",source:"@site/docs/exercises/polymorphie/polymorphie01.md",sourceDirName:"exercises/polymorphie",slug:"/exercises/polymorphie/polymorphie01",permalink:"/programming/exercises/polymorphie/polymorphie01",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/exercises/polymorphie/polymorphie01.md",tags:[],version:"current",frontMatter:{title:"Polymorphie 01"},sidebar:"exercisesSidebar",previous:{title:"Polymorphie",permalink:"/programming/exercises/polymorphie/"},next:{title:"Polymorphie 02",permalink:"/programming/exercises/polymorphie/polymorphie02"}},u={},m=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Hinweise zur Klasse Car",id:"hinweise-zur-klasse-car",level:2},{value:"Hinweise zur Klasse Truck",id:"hinweise-zur-klasse-truck",level:2},{value:"Konsolenausgabe",id:"konsolenausgabe",level:2}],p={toc:m};function c(e){let{components:a,...l}=e;return(0,n.kt)("wrapper",(0,t.Z)({},p,l,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Passe die Klasse ",(0,n.kt)("inlineCode",{parentName:"li"},"Vehicle")," aus \xdcbungsaufgabe\n",(0,n.kt)("a",{parentName:"li",href:"/programming/exercises/enumerations/enumerations01"},"Enumerations01")," anhand des abgebildeten\nKlassendiagramms an und erstelle die Klassen ",(0,n.kt)("inlineCode",{parentName:"li"},"Car")," und ",(0,n.kt)("inlineCode",{parentName:"li"},"Truck")),(0,n.kt)("li",{parentName:"ul"},"Passe die ausf\xfchrbare Klasse aus \xdcbungsaufgabe\n",(0,n.kt)("a",{parentName:"li",href:"/programming/exercises/enumerations/enumerations01"},"Enumerations01")," so an, dass keine\nFahrzeuge, sondern Autos und Lastwagen erzeugt und ausgegeben werden")),(0,n.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/170883749-a72e4bd8-4059-432e-a648-f5f6bdbfc6ef.png",alt:"image"})),(0,n.kt)("h2",{id:"hinweise-zur-klasse-car"},"Hinweise zur Klasse Car"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,n.kt)("li",{parentName:"ul"},"Die Methode ",(0,n.kt)("inlineCode",{parentName:"li"},"void doATurboBoost()")," soll die Geschwindigkeit verdoppeln"),(0,n.kt)("li",{parentName:"ul"},"Die Methode ",(0,n.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,n.kt)("h2",{id:"hinweise-zur-klasse-truck"},"Hinweise zur Klasse Truck"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,n.kt)("li",{parentName:"ul"},"Die Methode ",(0,n.kt)("inlineCode",{parentName:"li"},"void transform()")," soll das Attribut isTransformed invertieren"),(0,n.kt)("li",{parentName:"ul"},"Die Methode ",(0,n.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,n.kt)("h2",{id:"konsolenausgabe"},"Konsolenausgabe"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-console"},"Anzahl Fahrzeuge: 0\nAnzahl Fahrzeuge: 3\nPorsche 911 (Elektro, 2 Sitzpl\xe4tze)\nMAN TGX (Diesel, 20t)\nOpel Zafira Life (Diesel, 7 Sitzpl\xe4tze)\nPorsche 911 beschleunigt auf 50 km/h\nMAN TGX verwandelt sich in einen Autobot\nPorsche 911 macht einen TurboBoost und beschleunigt auf 100 km/h\nMAN TGX verwandelt sich in einen Lastwagen zur\xfcck\n")),(0,n.kt)(r.Z,{pullRequest:"41",branchSuffix:"polymorphy/01",mdxType:"Exercise"}))}c.isMDXComponent=!0}}]);