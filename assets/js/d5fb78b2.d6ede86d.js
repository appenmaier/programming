"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[7298],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={title:"Datenklassen (Records)",description:"",sidebar_position:250,tags:["datenklasse"]},o=void 0,s={unversionedId:"documentation/records",id:"documentation/records",title:"Datenklassen (Records)",description:"",source:"@site/docs/documentation/records.md",sourceDirName:"documentation",slug:"/documentation/records",permalink:"/programming/docs/documentation/records",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/documentation/records.md",tags:[{label:"datenklasse",permalink:"/programming/docs/tags/datenklasse"}],version:"current",sidebarPosition:250,frontMatter:{title:"Datenklassen (Records)",description:"",sidebar_position:250,tags:["datenklasse"]},sidebar:"documentationSidebar",previous:{title:"Entwurfsmuster (Design Patterns)",permalink:"/programming/docs/documentation/design/design-patterns"},next:{title:"Innere Klassen (Inner Classes)",permalink:"/programming/docs/documentation/inner-classes"}},l={},c=[],d={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Datenklassen sind Klassen die lediglich der Kapselung unver\xe4nderlicher Daten dienen. Daher bestehen Datenklassen h\xe4ufig aus Boilerplate-Code. Unter Boilerplate-Code versteht man Anweisungbl\xf6cke, die an verschiedenen Stellen mehr oder weniger identisch verwendet\nwerden."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public final class Student {\n\n    public int id;\n    public String name;\n\n    public Student (int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n  \n    public int getId() {\n        return id;\n    }\n  \n    public String getName() {\n        return name;\n    }\n  \n    public final boolean equals(Object o) { }\n    public final int hashCode() { }\n    public final String toString() { }\n\n}\n")),(0,a.kt)("p",null,"Seit Java 16 bieten Records die M\xf6glichkeiten, Datenklassen einfach umzusetzen. Records sind spezielle Klassen, die anhand der festgelegten Parameter entsprechende Konstruktoren, Getter sowie Implementierungen f\xfcr die Methoden ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean equals(Object)"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"int hashCode()")," und ",(0,a.kt)("inlineCode",{parentName:"p"},"String toString()")," erzeugen. Das Schl\xfcsselwort f\xfcr Records lautet ",(0,a.kt)("inlineCode",{parentName:"p"},"record"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public record(int id, String name ) { }\n")),(0,a.kt)("admonition",{title:"Hinweis",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Da Records von der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Record")," abgeleitet sind, k\xf6nnen sie nicht von einer weiteren Klasse abgeleitet werden. Allerdings k\xf6nnen Records, wie andere Klassen auch, beliebig viele ",(0,a.kt)("a",{parentName:"p",href:"/programming/docs/documentation/interfaces"},"Schnittstellen")," implementieren.")))}p.isMDXComponent=!0}}]);