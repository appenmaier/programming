"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[6872],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(t),h=a,p=m["".concat(l,".").concat(h)]||m[h]||c[h]||i;return t?r.createElement(p,s(s({ref:n},d),{},{components:t})):r.createElement(p,s({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1292:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={title:"Ausnahmen (Exceptions)",description:"",sidebar_position:230,tags:["exceptions"]},s=void 0,o={unversionedId:"documentation/exceptions",id:"documentation/exceptions",title:"Ausnahmen (Exceptions)",description:"",source:"@site/docs/documentation/exceptions.md",sourceDirName:"documentation",slug:"/documentation/exceptions",permalink:"/programming/documentation/exceptions",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/documentation/exceptions.md",tags:[{label:"exceptions",permalink:"/programming/tags/exceptions"}],version:"current",sidebarPosition:230,frontMatter:{title:"Ausnahmen (Exceptions)",description:"",sidebar_position:230,tags:["exceptions"]},sidebar:"documentationSidebar",previous:{title:"Komparatoren",permalink:"/programming/documentation/comparators"},next:{title:"Softwaregestaltung (Softwaredesign)",permalink:"/programming/documentation/design/"}},l={},u=[{value:"Die Klassenhierarchie der Laufzeitfehler",id:"die-klassenhierarchie-der-laufzeitfehler",level:2},{value:"Definition von Ausnahmenklassen",id:"definition-von-ausnahmenklassen",level:2},{value:"Ausl\xf6sen von Ausnahmen",id:"ausl\xf6sen-von-ausnahmen",level:2},{value:"Weiterleiten von Ausnahmen",id:"weiterleiten-von-ausnahmen",level:2},{value:"Abfangen von Ausnahmen",id:"abfangen-von-ausnahmen",level:2}],d={toc:u};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Programmfehler (Bugs) f\xfchren dazu, dass Programme unerwartete Ergebnisse liefern oder abst\xfcrzen. Je komplexer das Programm, desto wichtiger wird eine durchdachte und konsequente Fehlerbehandlung. Man unterscheidt dabei zwischen verschiedenen Fehlerarten:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Kompilierungsfehler sind Programmfehler, die verhindern, dass das Programm ausgef\xfchrt werden kann. Sie k\xf6nnen relativ einfach behoben werden, da sie schon zur Designzeit auftreten und von den meisten Entwicklungsumgebungen direkt angezeigt werden."),(0,a.kt)("li",{parentName:"ul"},"Verh\xe4lt sich das Programm nicht wie beabsichtigt, spricht man von Logikfehlern. Sie sind mit am schwersten zu entdecken und zu beheben. Zur Unterst\xfczung bei der Fehlersuche und -behandlung kann unter Anderem der Debugger verwendet werden. Der Debugger\nerm\xf6glicht es, Programme zur Laufzeit zu analysieren und zu steuern. Durch das Setzen von Haltepunkten (Breakpoints) kann die Ausf\xfchrung des Programms an beliebiger Stelle angehalten werden. Dadurch lassen sich z.B. die Inhalte von Datenobjekten \xfcberpr\xfcfen.\nZudem bietet der Debugger die M\xf6glichkeit, die weitere Ausf\xfchrung des Programms in der gew\xfcnschten Schrittweite forzuf\xfchren."),(0,a.kt)("li",{parentName:"ul"},"Laufzeitfehler treten erst beim Ausf\xfchren des Programms auf. Sie entstehen meist dann, wenn das Programm versucht, eine Operation auszuf\xfchren, die nicht ausgef\xfchrt werden kann (z.B. die Division durch Null). Diese Situationen werden auch als Ausnahmen\n(Exceptions) bezeichnet. Ausnahmen gew\xe4hrleisten eine klare Trennung zwischen funktionalem Code und Code zur Fehlerbehandlung. Die Fehlerbehandlung erfolgt dabei gem\xe4\xdf dem Ausnahmenbehandlungsprozess: nachdem eine Ausnahme ausgel\xf6st wurde, kann bzw. muss diese\nje nach Ausnahmenart vom Empf\xe4nger der Ausnahme entweder behandelt oder weitergeleitet werden (",(0,a.kt)("strong",{parentName:"li"},"Catch-or-Throw-Regel"),"). Man unterscheidet zwischen ",(0,a.kt)("strong",{parentName:"li"},"gepr\xfcften")," (checked) und ",(0,a.kt)("strong",{parentName:"li"},"ungepr\xfcften")," (unchecked) Ausnahmen. Gepr\xfcfte Ausnahmen ",(0,a.kt)("strong",{parentName:"li"},"m\xfcssen"),", ungepr\xfcfte\nAusnahmen ",(0,a.kt)("strong",{parentName:"li"},"k\xf6nnen")," behandelt bzw. weitergeleitet werden.")),(0,a.kt)("h2",{id:"die-klassenhierarchie-der-laufzeitfehler"},"Die Klassenhierarchie der Laufzeitfehler"),(0,a.kt)("p",null,"Die Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Throwable")," stellt die Oberklasse aller Laufzeitfehler dar. Schwerwiegende Fehler (haupts\xe4chlich Probleme in der JVM (Java Virtual Machine)) werden durch Unterklassen der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," abgebildet, gepr\xfcfte Ausnahmen durch Unterklassen der Klasse\n",(0,a.kt)("inlineCode",{parentName:"p"},"Exception")," und ungepr\xfcfte Ausnahmen durch Unterklassen der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"RuntimeException"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/171613641-bfe294ad-7323-4865-a043-f77c751a8759.png",alt:"image"})),(0,a.kt)("h2",{id:"definition-von-ausnahmenklassen"},"Definition von Ausnahmenklassen"),(0,a.kt)("p",null,"Eigene Ausnahmenklassen werden durch einfaches Ableiten von einer bestehenden Ausnahmenklasse definiert. Ausnahmenklassen sollten dabei immer von der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Exception")," oder einer ihrer Unterklassen abgeleitet werden, nicht von der Klasse ",(0,a.kt)("inlineCode",{parentName:"p"},"Error"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class QuxException extends Exception {\n\n    public QuxException() { }\n    public QuxException(String message) { }\n\n}\n")),(0,a.kt)("h2",{id:"ausl\xf6sen-von-ausnahmen"},"Ausl\xf6sen von Ausnahmen"),(0,a.kt)("p",null,"Mit dem Schl\xfcsselwort ",(0,a.kt)("inlineCode",{parentName:"p"},"throw")," kann innerhalb einer Methode eine Ausnahme ausgel\xf6st werden. Die Methode, in der die Ausnahme ausgel\xf6st wird, muss mit dem Schl\xfcsselwort ",(0,a.kt)("inlineCode",{parentName:"p"},"throws")," die Ausnahmenklasse angeben, die ausgel\xf6st werden kann."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Foo {\n\n    public void bar() throws QuxException {\n        throw new QuxException();\n    }\n\n}\n")),(0,a.kt)("h2",{id:"weiterleiten-von-ausnahmen"},"Weiterleiten von Ausnahmen"),(0,a.kt)("p",null,"Ausnahmen k\xf6nnen weitergeleitet werden. Hierbei wird die Fehlerbehandlung an die n\xe4chsth\xf6here Ebene weitergegeben. Um eine Ausnahme weiterzuleiten, muss in der weiterleitenden Methode mit ",(0,a.kt)("inlineCode",{parentName:"p"},"throws")," die Ausnahme angegeben werden, die ausgel\xf6st werden kann."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Foo {\n\n    public void bar() throws QuxException {\n        throw new QuxException();\n    }\n    \n    public void baz() throws QuxException {\n        bar();\n    }\n\n}\n")),(0,a.kt)("h2",{id:"abfangen-von-ausnahmen"},"Abfangen von Ausnahmen"),(0,a.kt)("p",null,"Mit Hilfe der try-catch-Anweisung k\xf6nnen Methoden, die eine Ausnahme ausl\xf6sen k\xf6nnen, \xfcberwacht werden; d.h. die Ausnahmen werden gegebenenfalls abgefangen. Der try-Block enth\xe4lt die Anweisungen, die \xfcberwacht werden sollen, der catch-Block enth\xe4lt die\neigentliche Fehlerbehandlung. Als Parameter von ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," muss angegeben werden, welche Ausnahme(n) abgefangen werden soll(en)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MainClass {\n\n    public static void main(String[] args) {\n        try {\n            Foo foo = new Foo();\n            foo.bar();\n        } catch (QuxException e) {\n            /* Fehlerbehandlung */\n        }\n    }\n\n}\n")))}c.isMDXComponent=!0}}]);