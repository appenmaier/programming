"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[6382],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>d});var t=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var o=t.createContext({}),u=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=s,b=m["".concat(o,".").concat(d)]||m[d]||c[d]||a;return r?t.createElement(b,i(i({ref:n},p),{},{components:r})):t.createElement(b,i({ref:n},p))}));function d(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9210:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var t=r(7462),s=(r(7294),r(3905));const a={title:"Polymorphie",description:"",sidebar_position:180,tags:["polymorphie","upcast","downcast"]},i=void 0,l={unversionedId:"documentation/polymorphie",id:"documentation/polymorphie",title:"Polymorphie",description:"",source:"@site/docs/documentation/polymorphie.md",sourceDirName:"documentation",slug:"/documentation/polymorphie",permalink:"/programming/docs/documentation/polymorphie",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/documentation/polymorphie.md",tags:[{label:"polymorphie",permalink:"/programming/docs/tags/polymorphie"},{label:"upcast",permalink:"/programming/docs/tags/upcast"},{label:"downcast",permalink:"/programming/docs/tags/downcast"}],version:"current",sidebarPosition:180,frontMatter:{title:"Polymorphie",description:"",sidebar_position:180,tags:["polymorphie","upcast","downcast"]},sidebar:"tutorialSidebar",previous:{title:"Vererbung",permalink:"/programming/docs/documentation/inheritance"},next:{title:"Die Mutter aller Klassen",permalink:"/programming/docs/documentation/object"}},o={},u=[{value:"Upcast",id:"upcast",level:2},{value:"Downcast",id:"downcast",level:2},{value:"Der instanceof-Operator",id:"der-instanceof-operator",level:2}],p={toc:u};function c(e){let{components:n,...r}=e;return(0,s.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Unter Polymorphie (griechisch f\xfcr Vielgestaltigkeit) versteht man, dass eine Referenzvariable zur Laufzeit durch Typumwandlung Referenzen auf Objekte unterschiedlicher Klassen besitzen kann und dass dadurch unterschiedliche Methodenimplementierungen aufgerufen\nwerden k\xf6nnen. Man spricht in diesem Zusammenhang auch vom ",(0,s.kt)("strong",{parentName:"p"},"statischen Datentyp einer Referenzvariablen")," (der zur Designzeit festgelegt wird) und vom ",(0,s.kt)("strong",{parentName:"p"},"dynamischen Datentyp einer Referenzvariablen")," (der zur Laufzeit zugewiesen wird). Der statische Typ legt\nfest, welche Methoden aufgerufen werden k\xf6nnen, der dynamische, welche Methodenimplementierung aufgerufen wird. Die Typumwandlung von der abgeleiteten Unterklasse zur Oberklasse bezeichnet man als ",(0,s.kt)("strong",{parentName:"p"},"Upcast"),", die R\xfcckumwandlung als ",(0,s.kt)("strong",{parentName:"p"},"Downcast"),"."),(0,s.kt)("h2",{id:"upcast"},"Upcast"),(0,s.kt)("p",null,"Beim Upcast wird die Objektreferenz der Unterklasse in eine Objektreferenz der Oberklasse umgewandelt."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public class SuperClass { }\n\npublic class SubClass extends SuperClass { }\n\npublic class MainClass {\n\n    public static void main(String[] args) {\n        SuperClass superClass;\n        SubClass subClass = new SubClass();\n        superClass = subClass; // Upcast\n    }\n  \n}\n")),(0,s.kt)("h2",{id:"downcast"},"Downcast"),(0,s.kt)("p",null,"Beim Downcast wird die Objektreferenz der Oberklasse in eine Objektreferenz der Unterklasse umgewandelt. Im Gegensatz zum Upcast muss bei einem Downcast der Typ explizit angegeben werden. Der Downcast einer nicht zuweisungskompatiblen Referenz f\xfchrt zu einer\n",(0,s.kt)("inlineCode",{parentName:"p"},"ClassCastException"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public class SuperClass { }\n\npublic class SubClass extends SuperClass { }\n\npublic class MainClass {\n\n    public static void main(String[] args) {\n        SuperClass superClass;\n        SubClass subClass = new SubClass();\n        superClass = subClass; // Upcast\n        subClass = (SubClass) superClass; // Downcast\n    }\n  \n}\n")),(0,s.kt)("h2",{id:"der-instanceof-operator"},"Der instanceof-Operator"),(0,s.kt)("p",null,"Mit dem Operator ",(0,s.kt)("inlineCode",{parentName:"p"},"instanceof")," kann zur Laufzeit gepr\xfcft werden, ob eine Objektreferenz zuweisungskompatibel zu einer Klasse ist. Eine Objektreferenz ist dann zuweisungskompatibel zu einer Klasse, wenn die Klasse des referenzierten Objektes in einer\nVererbungsbeziehung zur Klasse steht."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public class SuperClass { }\n\npublic class SubClass extends SuperClass { }\n\npublic class MainClass {\n\n    public static void main(String[] args) {\n        SuperClass superClass;\n        SubClass subClass = new SubClass();\n        superClass = subClass; // Upcast\n        if (superClass instanceof SubClass) {\n            subClass = (SubClass) superClass; // Downcast\n        }\n    }\n  \n}\n")),(0,s.kt)("p",null,"Seit Java 16 erm\xf6glicht der Mustervergleich bei ",(0,s.kt)("inlineCode",{parentName:"p"},"instanceof")," das Vermeiden notwendiger Typumwandlungen und sorgt gleichzeitig f\xfcr eine sicherere Programmierung."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public class SuperClass { }\n\npublic class SubClass extends SuperClass { }\n\npublic class MainClass {\n\n    public static void main(String[] args) {\n        SuperClass superClass;\n        SubClass subClass = new SubClass();\n        superClass = subClass; // Upcast\n        if (superClass instanceof SubClass s) { // Downcast\n        }\n    }\n  \n}\n")))}c.isMDXComponent=!0}}]);