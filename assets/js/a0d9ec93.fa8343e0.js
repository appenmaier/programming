"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[214],{5162:(e,a,t)=>{t.d(a,{Z:()=>i});var l=t(7294),s=t(6010);const n="tabItem_Ymn6";function i(e){let{children:a,hidden:t,className:i}=e;return l.createElement("div",{role:"tabpanel",className:(0,s.Z)(n,i),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>p});var l=t(7462),s=t(7294),n=t(6010),i=t(2389),r=t(7392),o=t(7094),u=t(2466);const m="tabList__CuJ",c="tabItem_LNqP";function d(e){var a;const{lazy:t,block:i,defaultValue:d,values:p,groupId:g,className:b}=e,h=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=p??h.map((e=>{let{props:{value:a,label:t,attributes:l}}=e;return{value:a,label:t,attributes:l}})),k=(0,r.l)(v,((e,a)=>e.value===a.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===d?d:d??(null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)??h[0].props.value;if(null!==f&&!v.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:E,setTabGroupChoices:N}=(0,o.U)(),[w,x]=(0,s.useState)(f),y=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=g){const e=E[g];null!=e&&e!==w&&v.some((a=>a.value===e))&&x(e)}const K=e=>{const a=e.currentTarget,t=y.indexOf(a),l=v[t].value;l!==w&&(C(a),x(l),null!=g&&N(g,String(l)))},Z=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{const a=y.indexOf(e.currentTarget)+1;t=y[a]??y[0];break}case"ArrowLeft":{const a=y.indexOf(e.currentTarget)-1;t=y[a]??y[y.length-1];break}}null==(a=t)||a.focus()};return s.createElement("div",{className:(0,n.Z)("tabs-container",m)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":i},b)},v.map((e=>{let{value:a,label:t,attributes:i}=e;return s.createElement("li",(0,l.Z)({role:"tab",tabIndex:w===a?0:-1,"aria-selected":w===a,key:a,ref:e=>y.push(e),onKeyDown:Z,onFocus:K,onClick:K},i,{className:(0,n.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":w===a})}),t??a)}))),t?(0,s.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},h.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==w})))))}function p(e){const a=(0,i.Z)();return s.createElement(d,(0,l.Z)({key:String(a)},e))}},7833:(e,a,t)=>{t.d(a,{Z:()=>o});var l=t(7294),s=t(5488),n=t(5162),i=t(9960),r=t(814);function o(e){let{pullRequest:a,branchSuffix:t}=e;return l.createElement(s.Z,null,l.createElement(n.Z,{value:"exercise",label:"Exercise",default:!0},l.createElement(r.Z,{language:"console"},`git switch exercises/${t}`),l.createElement(i.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/exercises/${t}/Exercise.java`},l.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),l.createElement(n.Z,{value:"solution",label:"Solution"},l.createElement(r.Z,{language:"console"},`git switch solutions/${t}`),l.createElement(i.Z,{to:`https://gitpod.io/#https://github.com/jappuccini/java-exercises/blob/solutions/${t}/Exercise.java`},l.createElement("img",{alt:"Open in Gitpod",src:"https://gitpod.io/button/open-in-gitpod.svg"}))),l.createElement(n.Z,{value:"pullrequest",label:"Pull Request"},"Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du im Pull Request "," ",l.createElement(i.Z,{to:`https://github.com/jappuccini/java-exercises/pull/${a}/files?diff=split`},"PR#",a)))}},4813:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var l=t(7462),s=(t(7294),t(3905)),n=t(7833);const i={title:"Class Diagrams 04"},r=void 0,o={unversionedId:"exercises/uml/class-diagrams04",id:"exercises/uml/class-diagrams04",title:"Class Diagrams 04",description:"- Erstelle die Klassen Company, Employee und Person anhand des",source:"@site/docs/exercises/uml/class-diagrams04.md",sourceDirName:"exercises/uml",slug:"/exercises/uml/class-diagrams04",permalink:"/programming/exercises/uml/class-diagrams04",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/exercises/uml/class-diagrams04.md",tags:[],version:"current",frontMatter:{title:"Class Diagrams 04"},sidebar:"exercisesSidebar",previous:{title:"Class Diagrams 03",permalink:"/programming/exercises/uml/class-diagrams03"},next:{title:"Class Diagrams 05",permalink:"/programming/exercises/uml/class-diagrams05"}},u={},m=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Hinweis zur Klasse Person",id:"hinweis-zur-klasse-person",level:2},{value:"Hinweise zur Klasse Employee",id:"hinweise-zur-klasse-employee",level:2},{value:"Hinweise zur Klasse Company",id:"hinweise-zur-klasse-company",level:2},{value:"Konsolenausgabe",id:"konsolenausgabe",level:2}],c={toc:m};function d(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,l.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Erstelle die Klassen ",(0,s.kt)("inlineCode",{parentName:"li"},"Company"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"Employee")," und ",(0,s.kt)("inlineCode",{parentName:"li"},"Person")," anhand des\nabgebildeten Klassendiagramms"),(0,s.kt)("li",{parentName:"ul"},"Erstelle eine ausf\xfchrbare Klasse, welche ein Unternehmen mit mehreren\nMitarbeitern erzeugt und auf der Konsole ausgibt")),(0,s.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/170922615-9bdc8766-e496-45ef-9134-319291585d65.png",alt:"image"})),(0,s.kt)("h2",{id:"hinweis-zur-klasse-person"},"Hinweis zur Klasse Person"),(0,s.kt)("p",null,"Der Konstruktor soll den Namen initialisieren."),(0,s.kt)("h2",{id:"hinweise-zur-klasse-employee"},"Hinweise zur Klasse Employee"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,s.kt)("li",{parentName:"ul"},"Die Methode ",(0,s.kt)("inlineCode",{parentName:"li"},"String getName()")," soll den Namen des Mitarbeiters zur\xfcckgeben"),(0,s.kt)("li",{parentName:"ul"},"Die Methode ",(0,s.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,s.kt)("h2",{id:"hinweise-zur-klasse-company"},"Hinweise zur Klasse Company"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Der Konstruktor soll den Namen sowie die Mitarbeiterliste initialisieren"),(0,s.kt)("li",{parentName:"ul"},"Die Methode ",(0,s.kt)("inlineCode",{parentName:"li"},"void addEmployee()")," soll der Mitarbeiterliste einen Mitarbeiter\nhinzuf\xfcgen"),(0,s.kt)("li",{parentName:"ul"},"Die Methode ",(0,s.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,s.kt)("h2",{id:"konsolenausgabe"},"Konsolenausgabe"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-console"},"Maier GmbH (5 Mitarbeiter)\n1 - Max Schmid - 50000\u20ac\n2 - Hans M\xfcller - 75000\u20ac\n3 - Lisa Meier - 40000\u20ac\n4 - Peter Schneider - 55000\u20ac\n5 - Miriam Albers - 90000\u20ac\n")),(0,s.kt)(n.Z,{pullRequest:"39",branchSuffix:"class-diagrams/04",mdxType:"Exercise"}))}d.isMDXComponent=!0}}]);