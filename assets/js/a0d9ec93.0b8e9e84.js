"use strict";(self.webpackChunkprogrammierung=self.webpackChunkprogrammierung||[]).push([[214],{5162:(e,a,l)=>{l.d(a,{Z:()=>r});var s=l(7294),t=l(6010);const n="tabItem_Ymn6";function r(e){let{children:a,hidden:l,className:r}=e;return s.createElement("div",{role:"tabpanel",className:(0,t.Z)(n,r),hidden:l},a)}},5488:(e,a,l)=>{l.d(a,{Z:()=>p});var s=l(7462),t=l(7294),n=l(6010),r=l(2389),i=l(7392),u=l(7094),o=l(2466);const m="tabList__CuJ",d="tabItem_LNqP";function c(e){var a;const{lazy:l,block:r,defaultValue:c,values:p,groupId:g,className:b}=e,h=t.Children.map(e.children,(e=>{if((0,t.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=p??h.map((e=>{let{props:{value:a,label:l,attributes:s}}=e;return{value:a,label:l,attributes:s}})),v=(0,i.l)(k,((e,a)=>e.value===a.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===c?c:c??(null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)??h[0].props.value;if(null!==f&&!k.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:w}=(0,u.U)(),[E,y]=(0,t.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,o.o5)();if(null!=g){const e=N[g];null!=e&&e!==E&&k.some((a=>a.value===e))&&y(e)}const K=e=>{const a=e.currentTarget,l=x.indexOf(a),s=k[l].value;s!==E&&(C(a),y(s),null!=g&&w(g,String(s)))},D=e=>{var a;let l=null;switch(e.key){case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;l=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;l=x[a]??x[x.length-1];break}}null==(a=l)||a.focus()};return t.createElement("div",{className:(0,n.Z)("tabs-container",m)},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":r},b)},k.map((e=>{let{value:a,label:l,attributes:r}=e;return t.createElement("li",(0,s.Z)({role:"tab",tabIndex:E===a?0:-1,"aria-selected":E===a,key:a,ref:e=>x.push(e),onKeyDown:D,onFocus:K,onClick:K},r,{className:(0,n.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":E===a})}),l??a)}))),l?(0,t.cloneElement)(h.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):t.createElement("div",{className:"margin-top--md"},h.map(((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==E})))))}function p(e){const a=(0,r.Z)();return t.createElement(c,(0,s.Z)({key:String(a)},e))}},7833:(e,a,l)=>{l.d(a,{Z:()=>u});var s=l(7294),t=l(5488),n=l(5162),r=l(9960),i=l(814);function u(e){let{pullRequest:a,branchSuffix:l}=e;return s.createElement(t.Z,null,s.createElement(n.Z,{value:"exercise",label:"Exercise",default:!0},s.createElement(i.Z,{language:"console"},`git switch exercises/${l}`)),s.createElement(n.Z,{value:"solution",label:"Solution"},s.createElement(i.Z,{language:"console"},`git switch solutions/${l}`)),s.createElement(n.Z,{value:"pullrequest",label:"Pull Request"},"Alle \xa0\xc4nderungen zwischen der Aufgabe und der L\xf6sung findest du in diesem"," ",s.createElement(r.Z,{to:`https://github.com/jappuccini/java-exercises/pull/${a}/files?diff=split`},"PR#",a)))}},4813:(e,a,l)=>{l.r(a),l.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>u,toc:()=>m});var s=l(7462),t=(l(7294),l(3905)),n=l(7833);const r={title:"Class Diagrams 04"},i=void 0,u={unversionedId:"exercises/uml/class-diagrams04",id:"exercises/uml/class-diagrams04",title:"Class Diagrams 04",description:"- Erstelle die Klassen Company, Employee und Person anhand des",source:"@site/docs/exercises/uml/class-diagrams04.md",sourceDirName:"exercises/uml",slug:"/exercises/uml/class-diagrams04",permalink:"/programming/exercises/uml/class-diagrams04",draft:!1,editUrl:"https://github.com/appenmaier/programming/tree/main/docs/exercises/uml/class-diagrams04.md",tags:[],version:"current",frontMatter:{title:"Class Diagrams 04"},sidebar:"exercisesSidebar",previous:{title:"Class Diagrams 03",permalink:"/programming/exercises/uml/class-diagrams03"},next:{title:"Class Diagrams 05",permalink:"/programming/exercises/uml/class-diagrams05"}},o={},m=[{value:"Klassendiagramm",id:"klassendiagramm",level:2},{value:"Hinweis zur Klasse Person",id:"hinweis-zur-klasse-person",level:2},{value:"Hinweise zur Klasse Employee",id:"hinweise-zur-klasse-employee",level:2},{value:"Hinweise zur Klasse Company",id:"hinweise-zur-klasse-company",level:2},{value:"Konsolenausgabe",id:"konsolenausgabe",level:2}],d={toc:m};function c(e){let{components:a,...l}=e;return(0,t.kt)("wrapper",(0,s.Z)({},d,l,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Erstelle die Klassen ",(0,t.kt)("inlineCode",{parentName:"li"},"Company"),", ",(0,t.kt)("inlineCode",{parentName:"li"},"Employee")," und ",(0,t.kt)("inlineCode",{parentName:"li"},"Person")," anhand des\nabgebildeten Klassendiagramms"),(0,t.kt)("li",{parentName:"ul"},"Erstelle eine ausf\xfchrbare Klasse, welche ein Unternehmen mit mehreren\nMitarbeitern erzeugt und auf der Konsole ausgibt")),(0,t.kt)("h2",{id:"klassendiagramm"},"Klassendiagramm"),(0,t.kt)("p",null,(0,t.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/47243617/170922615-9bdc8766-e496-45ef-9134-319291585d65.png",alt:"image"})),(0,t.kt)("h2",{id:"hinweis-zur-klasse-person"},"Hinweis zur Klasse Person"),(0,t.kt)("p",null,"Der Konstruktor soll den Namen initialisieren."),(0,t.kt)("h2",{id:"hinweise-zur-klasse-employee"},"Hinweise zur Klasse Employee"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Der Konstruktor soll alle Attribute initialisieren"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"String getName()")," soll den Namen des Mitarbeiters zur\xfcckgeben"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,t.kt)("h2",{id:"hinweise-zur-klasse-company"},"Hinweise zur Klasse Company"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Der Konstruktor soll den Namen sowie die Mitarbeiterliste initialisieren"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"void addEmployee()")," soll der Mitarbeiterliste einen Mitarbeiter\nhinzuf\xfcgen"),(0,t.kt)("li",{parentName:"ul"},"Die Methode ",(0,t.kt)("inlineCode",{parentName:"li"},"void print()")," soll alle Attribute auf der Konsole ausgeben")),(0,t.kt)("h2",{id:"konsolenausgabe"},"Konsolenausgabe"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-console"},"Maier GmbH (5 Mitarbeiter)\n1 - Max Schmid - 50000\u20ac\n2 - Hans M\xfcller - 75000\u20ac\n3 - Lisa Meier - 40000\u20ac\n4 - Peter Schneider - 55000\u20ac\n5 - Miriam Albers - 90000\u20ac\n")),(0,t.kt)(n.Z,{pullRequest:"39",branchSuffix:"class-diagrams/04",mdxType:"Exercise"}))}c.isMDXComponent=!0}}]);